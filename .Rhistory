facet_wrap(~source, ncol = 2, scales = "free") +
coord_flip()
ggplot(total_words, aes(n/total, fill = source)) +
geom_histogram(show.legend = FALSE) +
xlim(NA, 0.01) +
facet_wrap(~source, ncol = 2, scales = "free_y")
freq_by_rank <- total_words %>%
group_by(source) %>%
arrange(desc(n)) %>%
mutate(rank = row_number(),
`term frequency` = n/total)
freq_by_rank
freq_by_rank %>%
ggplot(aes(rank, `term frequency`, color = source)) +
geom_line(size = 1.1, alpha = 0.8, show.legend = FALSE) +
scale_x_log10() +
scale_y_log10()
rank_subset <- freq_by_rank %>%
filter(rank < 500,
rank > 10)
lm(log10(`term frequency`) ~ log10(rank), data = rank_subset)
freq_by_rank %>%
ggplot(aes(rank, `term frequency`, color = source)) +
geom_abline(intercept = -1.417  , slope = -0.730, color = "gray50", linetype = 2) +
geom_line(size = 1.1, alpha = 0.8, show.legend = FALSE) +
scale_x_log10() +
scale_y_log10()
rank_subset <- freq_by_rank %>%
filter(rank < 500,
rank > 10)
lm(log10(`term frequency`) ~ log10(rank), data = rank_subset)
freq_by_rank %>%
ggplot(aes(rank, `term frequency`, color = source)) +
geom_abline(intercept = -1.417  , slope = -0.730, color = "gray50", linetype = 2) +
geom_line(size = 1.1, alpha = 0.8, show.legend = FALSE) +
scale_x_log10() +
scale_y_log10()
frequency %>% View()
sentiment_dcard = student_dcard %>%
filter(nchar(.$word)>1) %>%
group_by(source,word) %>%
summarise(sum = n()) %>%
filter(sum>1) %>%
arrange(desc(sum))%>%
inner_join(LIWC_ch)
student_dcard %>%
inner_join(LIWC_ch)
kable(sentiment_dcard) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
scroll_box(height = "300px")
student_dcard %>%
filter(nchar(.$word)>1) %>%
group_by(source,word) %>%
summarise(sum = n()) %>%
filter(sum>1) %>%
arrange(desc(sum)) %>%
filter(source =="nsysu_dcard")
student_dcard %>%
filter(nchar(.$word)>1) %>%
group_by(source,word) %>%
summarise(sum = n()) %>%
filter(sum>1) %>%
arrange(desc(sum)) %>%
filter(source =="nuk_dcard")
kable(student_dcard) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
scroll_box(height = "300px")
kable(sentiment_dcard) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
scroll_box(height = "300px")
# 顯示相關性大於0.4的組合
set.seed(2019)
word_cors %>%
filter(correlation > .3) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = correlation), show.legend = FALSE) +
geom_node_point(color = "lightblue", size = 3) +
geom_node_text(aes(label = name), repel = TRUE, family = "Heiti TC Light") + #加入中文字型設定，避免中文字顯示錯誤。
theme_void()
# 顯示相關性大於0.4的組合
set.seed(2019)
word_cors %>%
filter(correlation > .35) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = correlation), show.legend = FALSE) +
geom_node_point(color = "lightblue", size = 3) +
geom_node_text(aes(label = name), repel = TRUE, family = "Heiti TC Light") + #加入中文字型設定，避免中文字顯示錯誤。
theme_void()
# 顯示相關性大於0.4的組合
set.seed(2019)
word_cors %>%
filter(correlation > .36) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = correlation), show.legend = FALSE) +
geom_node_point(color = "lightblue", size = 3) +
geom_node_text(aes(label = name), repel = TRUE, family = "Heiti TC Light") + #加入中文字型設定，避免中文字顯示錯誤。
theme_void()
# 顯示相關性大於0.4的組合
set.seed(2019)
word_cors %>%
filter(correlation > .37) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = correlation), show.legend = FALSE) +
geom_node_point(color = "lightblue", size = 3) +
geom_node_text(aes(label = name), repel = TRUE, family = "Heiti TC Light") + #加入中文字型設定，避免中文字顯示錯誤。
theme_void()
# 顯示相關性大於0.4的組合
set.seed(2019)
word_cors %>%
filter(correlation > .38) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = correlation), show.legend = FALSE) +
geom_node_point(color = "lightblue", size = 3) +
geom_node_text(aes(label = name), repel = TRUE, family = "Heiti TC Light") + #加入中文字型設定，避免中文字顯示錯誤。
theme_void()
# 顯示相關性大於0.4的組合
set.seed(2019)
word_cors %>%
filter(correlation > .39) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = correlation), show.legend = FALSE) +
geom_node_point(color = "lightblue", size = 3) +
geom_node_text(aes(label = name), repel = TRUE, family = "Heiti TC Light") + #加入中文字型設定，避免中文字顯示錯誤。
theme_void()
# 顯示相關性大於0.4的組合
set.seed(2019)
word_cors %>%
filter(correlation > .394) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = correlation), show.legend = FALSE) +
geom_node_point(color = "lightblue", size = 3) +
geom_node_text(aes(label = name), repel = TRUE, family = "Heiti TC Light") + #加入中文字型設定，避免中文字顯示錯誤。
theme_void()
# 顯示相關性大於0.4的組合
set.seed(2019)
word_cors %>%
filter(correlation > .395) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = correlation), show.legend = FALSE) +
geom_node_point(color = "lightblue", size = 3) +
geom_node_text(aes(label = name), repel = TRUE, family = "Heiti TC Light") + #加入中文字型設定，避免中文字顯示錯誤。
theme_void()
# 顯示相關性大於0.4的組合
set.seed(2019)
word_cors %>%
filter(correlation > .396) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = correlation), show.legend = FALSE) +
geom_node_point(color = "lightblue", size = 3) +
geom_node_text(aes(label = name), repel = TRUE, family = "Heiti TC Light") + #加入中文字型設定，避免中文字顯示錯誤。
theme_void()
# 顯示相關性大於0.4的組合
set.seed(2019)
word_cors %>%
filter(correlation > .397) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = correlation), show.legend = FALSE) +
geom_node_point(color = "lightblue", size = 3) +
geom_node_text(aes(label = name), repel = TRUE, family = "Heiti TC Light") + #加入中文字型設定，避免中文字顯示錯誤。
theme_void()
# 顯示相關性大於0.4的組合
set.seed(2019)
word_cors %>%
filter(correlation > .398) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = correlation), show.legend = FALSE) +
geom_node_point(color = "lightblue", size = 3) +
geom_node_text(aes(label = name), repel = TRUE, family = "Heiti TC Light") + #加入中文字型設定，避免中文字顯示錯誤。
theme_void()
# 生成一個時間段中的 日期和情緒標籤的所有可能組合
all_dates <-
expand.grid(seq(as.Date(min(article_comment_sentiment_bigrams$artDate)), as.Date(max(article_comment_sentiment_bigrams$artDate)), by="day"), c("positive", "negative"))
names(all_dates) <- c("artDate", "sentiment")
all_dates
# 計算我們資料集中 每日的情緒值
sentiment_plot_data <- article_comment_sentiment_bigrams %>%
group_by(artDate,sentiment_tag) %>%
summarise(count=n())
# 將所有 "日期與情緒值的所有可能組合" 與 "每日的情緒值" join起來
# 如果資料集中某些日期沒有文章或情緒值，會出現NA
# 我們用0取代NA
sentiment_plot_data <- all_dates %>%
merge(sentiment_plot_data,by.x=c('artDate', "sentiment"),by.y=c('artDate', "sentiment_tag"),
all.x=T,all.y=T) %>%
mutate(count = replace_na(count, 0))
# 時間區段中，每日的情緒值
sentiment_plot_data
# 畫圖
sentiment_plot_data %>%
ggplot()+
geom_line(aes(x=artDate,y=count,colour=sentiment), size = 1.2)+
scale_x_date(labels = date_format("%m/%d"))
# 計算我們資料集中 每日的情緒值
source_sentiment_plot_data <- article_comment_sentiment_bigrams %>%
group_by(source, artDate,sentiment_tag) %>%
summarise(count=n())
# 將所有 "日期與情緒值的所有可能組合" 與 "每日的情緒值" join起來
# 如果資料集中某些日期沒有文章或情緒值，會出現NA
# 我們用0取代NA
source_sentiment_plot_data <- rbind(
all_dates %>%
merge(source_sentiment_plot_data %>%
filter(source == "nsysu_dcard")
,by.x=c('artDate', "sentiment"),by.y=c('artDate', "sentiment_tag"),
all.x=T,all.y=T) %>%
mutate(source = "nsysu_dcard"),
all_dates %>%
merge(source_sentiment_plot_data %>%
filter(source == "nuk_dcard")
,by.x=c('artDate', "sentiment"),by.y=c('artDate', "sentiment_tag"),
all.x=T,all.y=T) %>%
mutate(source = "nuk_dcard"),
all_dates %>%
merge(source_sentiment_plot_data %>%
filter(source == "exam_dcard")
,by.x=c('artDate', "sentiment"),by.y=c('artDate', "sentiment_tag"),
all.x=T,all.y=T) %>%
mutate(source = "exam_dcard"),
all_dates %>%
merge(source_sentiment_plot_data %>%
filter(source == "ptt")
,by.x=c('artDate', "sentiment"),by.y=c('artDate', "sentiment_tag"),
all.x=T,all.y=T) %>%
mutate(source = "ptt")
) %>%
mutate(count = replace_na(count, 0))
# 時間區段中，每日的情緒值
sentiment_plot_data
# 畫圖
source_sentiment_plot_data %>%
ggplot()+
geom_line(aes(x=artDate,y=count,colour=sentiment))+
scale_x_date(labels = date_format("%m/%d")) +
facet_wrap(~source)
# 查看 前面出現否定詞 且 後面爲情緒詞彙 的組合
article_comment_sentiment_bigrams %>%
filter(word1 %in% negation_words) %>%
count(word1, word2, sort = TRUE)
# 如果在情緒詞前出現的是否定詞的話，則將他的情緒對調
article_comment_sentiment_bigrams_negated <- article_comment_sentiment_bigrams %>%
mutate(sentiment=ifelse(word1 %in% negation_words, -1*sentiment, sentiment)) %>%
mutate(sentiment_tag=ifelse(sentiment>0, "positive", "negative"))
kable(article_comment_sentiment_bigrams_negated) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
scroll_box(height = "300px")
# 查看 前面出現否定詞 且 後面爲情緒詞彙 的組合
article_comment_sentiment_bigrams %>%
filter(word1 %in% negation_words) %>%
count(word1, word2, sort = TRUE)
# 如果在情緒詞前出現的是否定詞的話，則將他的情緒對調
article_comment_sentiment_bigrams_negated <- article_comment_sentiment_bigrams %>%
mutate(sentiment=ifelse(word1 %in% negation_words, -1*sentiment, sentiment)) %>%
mutate(sentiment_tag=ifelse(sentiment>0, "positive", "negative"))
kable(article_comment_sentiment_bigrams_negated) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
scroll_box(height = "300px")
# 計算我們資料集中 每日的情緒值
negated_sentiment_plot_data <- article_comment_sentiment_bigrams_negated %>%
group_by(artDate,sentiment_tag) %>%
summarise(count=n())
# 將所有 "日期與情緒值的所有可能組合" 與 "每日的情緒值" join起來
# 如果資料集中某些日期沒有文章或情緒值，會出現NA
# 我們用0取代NA
negated_sentiment_plot_data <- all_dates %>%
merge(negated_sentiment_plot_data,by.x=c('artDate', "sentiment"),by.y=c('artDate', "sentiment_tag"),
all.x=T,all.y=T) %>%
mutate(count = replace_na(count, 0))
# 最後把圖畫出來
negated_sentiment_plot_data %>%
ggplot()+
geom_line(aes(x=artDate,y=count,colour=sentiment), size = 1.2)+
scale_x_date(labels = date_format("%m/%d"))
# 計算我們資料集中 每日的情緒值
source_negated_sentiment_plot_data <- article_comment_sentiment_bigrams_negated %>%
group_by(source, artDate,sentiment_tag) %>%
summarise(count=n())
# 將所有 "日期與情緒值的所有可能組合" 與 "每日的情緒值" join起來
# 如果資料集中某些日期沒有文章或情緒值，會出現NA
# 我們用0取代NA
source_negated_sentiment_plot_data <- rbind(
all_dates %>%
merge(source_negated_sentiment_plot_data %>%
filter(source == "nsysu_dcard")
,by.x=c('artDate', "sentiment"),by.y=c('artDate', "sentiment_tag"),
all.x=T,all.y=T) %>%
mutate(source = "nsysu_dcard"),
all_dates %>%
merge(source_negated_sentiment_plot_data %>%
filter(source == "nuk_dcard")
,by.x=c('artDate', "sentiment"),by.y=c('artDate', "sentiment_tag"),
all.x=T,all.y=T) %>%
mutate(source = "nuk_dcard"),
all_dates %>%
merge(source_negated_sentiment_plot_data %>%
filter(source == "exam_dcard")
,by.x=c('artDate', "sentiment"),by.y=c('artDate', "sentiment_tag"),
all.x=T,all.y=T) %>%
mutate(source = "exam_dcard"),
all_dates %>%
merge(source_negated_sentiment_plot_data %>%
filter(source == "ptt")
,by.x=c('artDate', "sentiment"),by.y=c('artDate', "sentiment_tag"),
all.x=T,all.y=T) %>%
mutate(source = "ptt")
) %>%
mutate(count = replace_na(count, 0))
# 時間區段中，每日的情緒值
source_negated_sentiment_plot_data
# 畫圖
source_negated_sentiment_plot_data %>%
ggplot()+
geom_line(aes(x=artDate,y=count,colour=sentiment))+
scale_x_date(labels = date_format("%m/%d")) +
facet_wrap(~source)
# 時間區段中，每日的情緒值
source_negated_sentiment_plot_data %>% View()
# 合併兩種情緒值的資料
all_sentiments <- bind_rows(
sentiment_plot_data %>% mutate(sentiment=paste(sentiment, "_original", sep = "")),
negated_sentiment_plot_data %>% mutate(sentiment=paste(sentiment, "_negated", sep = "")))
all_sentiments
all_sentiments %>% View()
# 先比較正面情緒
all_sentiments %>%
filter(sentiment %in% c("positive_original", "positive_negated")) %>%
ggplot()+
geom_line(aes(x=artDate,y=count,colour=sentiment))+
scale_x_date(labels = date_format("%m/%d"))
# 再比較負面情緒
all_sentiments %>%
filter(sentiment %in% c("negative_original", "negative_negated")) %>%
ggplot()+
geom_line(aes(x=artDate,y=count,colour=sentiment))+
scale_x_date(labels = date_format("%m/%d"))
# 合併兩種情緒值的資料
all_sentiments <- bind_rows(
source_sentiment_plot_data %>% mutate(sentiment=paste(sentiment, "_original", sep = "")),
source_negated_sentiment_plot_data %>% mutate(sentiment=paste(sentiment, "_negated", sep = "")))
kable(all_sentiments) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
scroll_box(height = "300px")
# 再比較負面情緒
all_sentiments %>%
filter(sentiment %in% c("negative_original", "negative_negated")) %>%
ggplot()+
geom_line(aes(x=artDate,y=count,colour=sentiment))+
scale_x_date(labels = date_format("%m/%d")) +
facet_wrap(~source)
# 再比較負面情緒
all_sentiments %>%
filter(sentiment %in% c("negative_original", "negative_negated")) %>%
ggplot()+
geom_line(aes(x=artDate,y=count,colour=sentiment))+
scale_x_date(labels = date_format("%m/%d")) +
facet_wrap(~source)
# 先比較正面情緒
all_sentiments %>%
filter(sentiment %in% c("positive_original", "positive_negated")) %>%
ggplot()+
geom_line(aes(x=artDate,y=count,colour=sentiment), size = 1.2)+
scale_x_date(labels = date_format("%m/%d"))
# 先比較正面情緒
all_sentiments %>%
filter(sentiment %in% c("positive_original", "positive_negated")) %>%
ggplot()+
geom_line(aes(x=artDate,y=count,colour=sentiment), size = 1)+
scale_x_date(labels = date_format("%m/%d"))
# 先比較正面情緒
all_sentiments %>%
filter(sentiment %in% c("positive_original", "positive_negated")) %>%
ggplot()+
geom_line(aes(x=artDate,y=count,colour=sentiment), size = 0.5)+
scale_x_date(labels = date_format("%m/%d"))
# 先比較正面情緒
all_sentiments %>%
filter(sentiment %in% c("positive_original", "positive_negated")) %>%
ggplot()+
geom_line(aes(x=artDate,y=count,colour=sentiment))+
scale_x_date(labels = date_format("%m/%d"))
# 再比較負面情緒
all_sentiments %>%
filter(sentiment %in% c("negative_original", "negative_negated")) %>%
ggplot()+
geom_line(aes(x=artDate,y=count,colour=sentiment))+
scale_x_date(labels = date_format("%m/%d"))
# 先比較正面情緒
all_sentiments %>%
filter(sentiment %in% c("positive_original", "positive_negated")) %>%
ggplot()+
geom_line(aes(x=artDate,y=count,colour=sentiment))+
scale_x_date(labels = date_format("%m/%d")) +
facet_wrap(~source)
# 再比較負面情緒
all_sentiments %>%
filter(sentiment %in% c("negative_original", "negative_negated")) %>%
ggplot()+
geom_line(aes(x=artDate,y=count,colour=sentiment))+
scale_x_date(labels = date_format("%m/%d")) +
facet_wrap(~source)
# 再比較負面情緒
all_sentiments %>%
filter(sentiment %in% c("negative_original", "negative_negated")) %>%
ggplot()+
geom_line(aes(x=artDate,y=count,colour=sentiment))+
scale_x_date(labels = date_format("%m/%d"))
# 先比較正面情緒
all_sentiments %>%
filter(sentiment %in% c("positive_original", "positive_negated")) %>%
ggplot()+
geom_line(aes(x=artDate,y=count,colour=sentiment))+
scale_x_date(labels = date_format("%m/%d"))
# 先比較正面情緒
ggplotly(all_sentiments %>%
filter(sentiment %in% c("positive_original", "positive_negated")) %>%
ggplot()+
geom_line(aes(x=artDate,y=count,colour=sentiment))+
scale_x_date(labels = date_format("%m/%d")) )
# 先比較正面情緒
ggplotly(all_sentiments %>%
filter(sentiment %in% c("positive_original", "positive_negated")) %>%
ggplot()+
geom_line(aes(x=artDate,y=count,colour=sentiment))+
scale_x_date(labels = date_format("%m/%d")) )
# 先比較正面情緒
ggplotly(all_sentiments %>%
filter(sentiment %in% c("positive_original", "positive_negated")) %>%
ggplot()+
geom_line(aes(x=artDate,y=count,colour=sentiment))+
scale_x_date(labels = date_format("%m/%d")))
# 先比較正面情緒
ggplotly(all_sentiments %>%
filter(sentiment %in% c("positive_original", "positive_negated")) %>%
ggplot()+
geom_line(aes(x=artDate,y=count,colour=sentiment))+
scale_x_date(labels = date_format("%m/%d"))) %>% View
# 先比較正面情緒
all_sentiments %>%
filter(sentiment %in% c("positive_original", "positive_negated")) %>%
ggplot()+
geom_line(aes(x=artDate,y=count,colour=sentiment))+
scale_x_date(labels = date_format("%m/%d")) %>% ggplotly()
ggplotly(pt)
# 先比較正面情緒
pt<- all_sentiments %>%
filter(sentiment %in% c("positive_original", "positive_negated")) %>%
ggplot()+
geom_line(aes(x=artDate,y=count,colour=sentiment))+
scale_x_date(labels = date_format("%m/%d"))
ggplotly(pt)
# 先比較正面情緒
all_sentiments %>%
filter(sentiment %in% c("positive_original", "positive_negated")) %>%
ggplot()+
geom_line(aes(x=artDate,y=count,colour=sentiment))+
scale_x_date(labels = date_format("%m/%d"))
# 先比較正面情緒
all_sentiments %>%
filter(sentiment %in% c("positive_original", "positive_negated")) %>%
ggplot()+
geom_line(aes(x=artDate,y=count,colour=sentiment))+
scale_x_date(labels = date_format("%m/%d")) %>% ggplotly()
# 先比較正面情緒
all_sentiments %>%
filter(sentiment %in% c("positive_original", "positive_negated")) %>%
ggplot()+
geom_line(aes(x=artDate,y=count,colour=sentiment))+
scale_x_date(labels = date_format("%m/%d"))
# 先比較正面情緒
all_sentiments %>%
filter(sentiment %in% c("positive_negated", "positive_original")) %>%
ggplot()+
geom_line(aes(x=artDate,y=count,colour=sentiment))+
scale_x_date(labels = date_format("%m/%d"))
# 先比較正面情緒
a = all_sentiments %>%
filter(sentiment %in% c("positive_negated", "positive_original")) %>%
ggplot()+
geom_line(aes(x=artDate,y=count,colour=sentiment))+
scale_x_date(labels = date_format("%m/%d"))
ggplotly(a)
# 先比較正面情緒
a = all_sentiments %>%
filter(sentiment %in% c("positive_negated", "positive_original"))
b  = a %>% ggplot()+
geom_line(aes(x=artDate,y=count,colour=sentiment))+
scale_x_date(labels = date_format("%m/%d"))
ggplotly(b)
s = ggplotly(b)
s
plot_date <-
data_count_by_date %>%
ggplot(aes(x = as.Date(artDate), y = count,colour=source)) +
geom_line(size = 0.5) +
# geom_vline(xintercept = as.numeric(as.Date("2019-03-30")), col='red') +
scale_x_date(labels = date_format("%Y/%m/%d" )) +
ggtitle("高大與中山併校 討論文章數") +
xlab("日期") +
ylab("數量") +
theme(text = element_text(family = "Heiti TC Light")) #加入中文字型設定，避免中文字顯示錯誤。
ggplotly(plot_date)
getwd()
